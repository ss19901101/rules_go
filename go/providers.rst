Go providers
============

.. _providers: https://docs.bazel.build/versions/master/skylark/rules.html#providers

.. _go_library: core.rst#go_library
.. _go_binary: core.rst#go_binary
.. _go_test: core.rst#go_test
.. _go_path: core.rst#go_path
.. _cc_library: https://docs.bazel.build/versions/master/be/c-cpp.html#cc_library
.. _flatbuffers: http://google.github.io/flatbuffers/
.. _static linking: modes.rst#building-static-binaries
.. _race detector: modes.rst#using-the-race-detector
.. _runfiles: https://docs.bazel.build/versions/master/skylark/lib/runfiles.html
.. _File: https://docs.bazel.build/versions/master/skylark/lib/File.html

.. role:: param(kbd)
.. role:: type(emphasis)
.. role:: value(code)
.. |mandatory| replace:: **mandatory value**


The providers_ are the outputs of the rules, you generaly get them by having a dependency on a rule,
and then asking for a provider of a specific type.

.. contents:: :depth: 2

-----

Design
------

The Go providers are designed primarily for the efficiency of the Go rules, the information they
share is mostly there because it is required for the core rules to work.

All the providers are designed to hold only immutable data. This is partly because its a cleaner
design choice to be able to assume a provider will never change, but also because only immutable
objects are allowed to be stored in a depset, and it's really useful to have depsets of providers.
Specifically the :param:`direct` and :param:`transitive` fields on GoLibrary_ only work because
it is immutable.

API
---

GoLibrary
~~~~~~~~~

GoLibrary is the provider exposed by the go_library_ rule, or anything that wants to behave like one.
In general you should build these using the new_go_library helper function.
It provides all the information requried as inputs to building an archive.
It can also be used to just provide sources and deps (for use in the embed attribute). There are
two main uses for this.
This is a non build mode specific provider.

#. Recompiling a library with additional sources.
   go_library_ returns a GoLibrary provider with the original sources and deps that it was
   consuming.
   go_test_ uses this to recompile the library with additional test files, to build the test
   version of the library. You can use the same feature to recompile a proto library with
   additional sources that were not generated by the proto compiler.

#. Providing the dependencies for generated code.
   If you wanted to use flatbuffers_ in your code, and you had a custom rule that ran the
   flatbuffers compiler to generate the serialization functions, you might hit the issue that
   the only thing that knows you depend on ``github.com/google/flatbuffers/go`` is the generated
   code.
   You can instead have the generator return a GoLibrary provider instead of just the generated
   files, allowing you to tie the generated files to the additional dependencies they add to
   any package trying to compile them.


+--------------------------------+-----------------------------------------------------------------+
| **Name**                       | **Type**                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`name`                  | :type:`The package name for the sources.`                       |
+--------------------------------+-----------------------------------------------------------------+
| The direct depencancies of the library.                                                          |
+--------------------------------+-----------------------------------------------------------------+
| :param:`label`                 | :type:`The label of the rule that generated the library.`       |
+--------------------------------+-----------------------------------------------------------------+
| The direct depencancies of the library.                                                          |
+--------------------------------+-----------------------------------------------------------------+
| :param:`importpath`            | :type:`string`                                                  |
+--------------------------------+-----------------------------------------------------------------+
| The import path for this library. Will always be set.                                            |
+--------------------------------+-----------------------------------------------------------------+
| :param:`pathtype`              | :type:`string`                                                  |
+--------------------------------+-----------------------------------------------------------------+
| Information about the source of the importpath. Possible values are:                             |
|                                                                                                  |
| :value:`explicit`                                                                                |
|     The importpath was explicitly supplied by the user and the library is importable.            |
|     This is the normal case.                                                                     |
| :value:`inferred`                                                                                |
|     The importpath was inferred from the directory structure and rule name. The library may be   |
|     importable.                                                                                  |
|     This is normally true for rules that do not expect to be compiled directly to a library,     |
|     embeded into another rule instead (source generators)                                        |
| :value:`export`                                                                                  |
|     The importpath was explicitly supplied by the user, but the library is                       |
|     not importable. This is the case for binaries and tests. The importpath                      |
|     may still be useful for `go_path`_ and other rules.                                          |
+--------------------------------+-----------------------------------------------------------------+
| :param:`resolve`               | :type:`function`                                                |
+--------------------------------+-----------------------------------------------------------------+
| The function that can be called to resolve this library to a mode specific GoSource.             |
+--------------------------------+-----------------------------------------------------------------+


GoSource
~~~~~~~~

GoSource represents a GoLibrary after mode specific processing, ready to build a GoArchive.
In general, only rules_go should need to build or handle these.

+--------------------------------+-----------------------------------------------------------------+
| **Name**                       | **Type**                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`library`               | :type:`GoLibrary`                                               |
+--------------------------------+-----------------------------------------------------------------+
| The go library that this GoSource was generated from.                                            |
+--------------------------------+-----------------------------------------------------------------+
| :param:`srcs`                  | :type:`list of File`                                            |
+--------------------------------+-----------------------------------------------------------------+
| The sources to compile into the archive.                                                         |
+--------------------------------+-----------------------------------------------------------------+
| :param:`x_defs`                | :type:`string_dict`                                             |
+--------------------------------+-----------------------------------------------------------------+
| Map of defines to add to the go link command.                                                    |
+--------------------------------+-----------------------------------------------------------------+
| :param:`deps`                  | :type:`list of GoLibrary`                                       |
+--------------------------------+-----------------------------------------------------------------+
| The direct dependencies needed by the :param:`srcs`.                                             |
+--------------------------------+-----------------------------------------------------------------+
| :param:`gc_goopts`             | :type:`list of string`                                          |
+--------------------------------+-----------------------------------------------------------------+
| Go compilation options that should be used when compiling these sources.                         |
| In general these will be used for *all* sources of any library this provider is embedded into.   |
+--------------------------------+-----------------------------------------------------------------+
| :param:`runfiles`              | :type:`Runfiles`                                                |
+--------------------------------+-----------------------------------------------------------------+
| The set of files needed by code in these sources at runtime.                                     |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cgo_deps`              | :type:`list of File`                                            |
+--------------------------------+-----------------------------------------------------------------+
| The direct cgo dependencies of this library.                                                     |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cgo_exports`           | :type:`list of File`                                            |
+--------------------------------+-----------------------------------------------------------------+
| The exposed cc headers for these sources.                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cgo_archives`          | :type:`list of File`                                            |
+--------------------------------+-----------------------------------------------------------------+
| The cgo archives to merge into a go archive for these sources.                                   |
+--------------------------------+-----------------------------------------------------------------+


GoArchiveData
~~~~~~~~~~~~~

GoArchiveData represents the compiled form of a package.

+--------------------------------+-----------------------------------------------------------------+
| **Name**                       | **Type**                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`name`                  | :type:`The package name for the sources.`                       |
+--------------------------------+-----------------------------------------------------------------+
| The direct depencancies of the library.                                                          |
+--------------------------------+-----------------------------------------------------------------+
| :param:`label`                 | :type:`The label of the rule that generated the library.`       |
+--------------------------------+-----------------------------------------------------------------+
| The direct depencancies of the library.                                                          |
+--------------------------------+-----------------------------------------------------------------+
| :param:`importpath`            | :type:`string`                                                  |
+--------------------------------+-----------------------------------------------------------------+
| The import path for this library. Will always be set.                                            |
+--------------------------------+-----------------------------------------------------------------+
| :param:`importmap`             | :type:`string`                                                  |
+--------------------------------+-----------------------------------------------------------------+
| The package path for this library. The compiler and linker use this to                           |
| disambiguoate packages with the same ``importpath``. It's usually the same                       |
| as ``importpath``, but is frequently different for vendored libraries.                           |
+--------------------------------+-----------------------------------------------------------------+
| :param:`pathtype`              | :type:`string`                                                  |
+--------------------------------+-----------------------------------------------------------------+
| Indicates how ``importpath`` was determined. May be one of:                                      |
|                                                                                                  |
| * ``"explicit"``: was explicitly set.                                                            |
| * ``"inferred"``: was inferred based on label name.                                              |
| * ``"export"``: a special name for synthetic packages. Not importable.                           |
+--------------------------------+-----------------------------------------------------------------+
| :param:`file`                  | :type:`compiled archive file`                                   |
+--------------------------------+-----------------------------------------------------------------+
| The archive file representing the library compiled in a specific :param:`mode` ready for linking |
| into binaries.                                                                                   |
+--------------------------------+-----------------------------------------------------------------+
| :param:`srcs`                  | :type:`list of File`                                            |
+--------------------------------+-----------------------------------------------------------------+
| The .go sources compiled into the archive. May have been generated or                            |
| transformed with tools like cgo and cover.                                                       |
+--------------------------------+-----------------------------------------------------------------+
| :param:`orig_srcs`             | :type:`list of File`                                            |
+--------------------------------+-----------------------------------------------------------------+
| The unmodified sources provided to the rule, including .go, .s, .h, .c files.                    |
+--------------------------------+-----------------------------------------------------------------+
| :param:`orig_src_map`          | :type:`dict mapping File to File`                               |
+--------------------------------+-----------------------------------------------------------------+
| A map from generated source files to the original files (in ``orig_srcs``)                       |
| they were generated from. Generated sources may be absent if they were not                       |
| generated from individual files in ``orig_srcs``.                                                |
+--------------------------------+-----------------------------------------------------------------+
| :param:`data_files`            | :type:`list of File`                                            |
+--------------------------------+-----------------------------------------------------------------+
| Data files which should be available at runtime to binaries and tests built                      |
| from this archive.                                                                               |
+--------------------------------+-----------------------------------------------------------------+
| :param:`searchpath`            | :type:`string`                                                  |
+--------------------------------+-----------------------------------------------------------------+
| **Deprecated:** The search path entry under which the :param:`lib` would be found.               |
+--------------------------------+-----------------------------------------------------------------+

GoArchive
~~~~~~~~~

GoArchive is a provider that exposes a compiled library along with it's full transitive
dependencies.
This is used when compiling and linking dependant libraries or binaries.

+--------------------------------+-----------------------------------------------------------------+
| **Name**                       | **Type**                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`source`                | :type:`GoSource`                                                |
+--------------------------------+-----------------------------------------------------------------+
| The source provider this GoArchive was compiled from.                                            |
+--------------------------------+-----------------------------------------------------------------+
| :param:`data`                  | :type:`GoArchiveData`                                           |
+--------------------------------+-----------------------------------------------------------------+
| The non transitive data for this archive.                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`direct`                | :type:`list of GoArchive`                                       |
+--------------------------------+-----------------------------------------------------------------+
| The direct dependencies of this archive.                                                         |
+--------------------------------+-----------------------------------------------------------------+
| :param:`searchpaths`           | :type:`depset of string`                                        |
+--------------------------------+-----------------------------------------------------------------+
| **Deprecated:** The transitive set of search paths needed to link with this archive.             |
+--------------------------------+-----------------------------------------------------------------+
| :param:`libs`                  | :type:`depset of File`                                          |
+--------------------------------+-----------------------------------------------------------------+
| The transitive set of libraries needed to link with this archive.                                |
+--------------------------------+-----------------------------------------------------------------+
| :param:`transitive`            | :type:`depset of GoArchiveData`                                 |
+--------------------------------+-----------------------------------------------------------------+
| The full set of transitive dependencies. This includes ``data`` for this                         |
| archive and all ``data`` members transitively reachable through ``direct``.                      |
+--------------------------------+-----------------------------------------------------------------+
| :param:`x_defs`                | :type:`string_dict`                                             |
+--------------------------------+-----------------------------------------------------------------+
| The full transitive set of defines to add to the go link command.                                |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cgo_deps`              | :type:`depset(cc_library)`                                      |
+--------------------------------+-----------------------------------------------------------------+
| The direct cgo dependencies of this library.                                                     |
| This has the same constraints as things that can appear in the deps of a cc_library_.            |
+--------------------------------+-----------------------------------------------------------------+
| :param:`cgo_exports`           | :type:`depset of GoSource`                                      |
+--------------------------------+-----------------------------------------------------------------+
| The the transitive set of c headers needed to reference exports of this archive.                 |
+--------------------------------+-----------------------------------------------------------------+
| :param:`runfiles`              | runfiles_                                                       |
+--------------------------------+-----------------------------------------------------------------+
| The files needed to run anything that includes this library.                                     |
+--------------------------------+-----------------------------------------------------------------+

GoPath
~~~~~~

GoPath is produced by the `go_path`_ rule. It gives a list of packages used to
build the ``go_path`` directory and provides a list of original files for
each package.

+--------------------------------+-----------------------------------------------------------------+
| **Name**                       | **Type**                                                        |
+--------------------------------+-----------------------------------------------------------------+
| :param:`gopath`                | :type:`string`                                                  |
+--------------------------------+-----------------------------------------------------------------+
| The short path to the output file or directory. Useful for constructing                          |
| ``runfiles`` paths.                                                                              |
+--------------------------------+-----------------------------------------------------------------+
| :param:`gopath_file`           | :type:`File`                                                    |
+--------------------------------+-----------------------------------------------------------------+
| A Bazel File_ that points to the output directory.                                               |
|                                                                                                  |
| * In ``archive`` mode, this is the archive.                                                      |
| * In ``copy`` mode, this is the output directory.                                                |
| * In ``link`` mode, this is an empty file inside the output directory, so                        |
|   you need to use .dirname to get the path to the directory.                                     |
+--------------------------------+-----------------------------------------------------------------+
| :param:`packages`              | :type:`list of struct`                                          |
+--------------------------------+-----------------------------------------------------------------+
| A list of structs representing packages used to build the ``go_path``                            |
| directory. Each struct has the following fields:                                                 |
|                                                                                                  |
| * ``importpath``: the import path of the package.                                                |
| * ``dir``: the subdirectory of the package within the ``go_path``, including                     |
|   the ``src/`` prefix. May different from ``importpath`` due to vendoring.                       |
| * ``srcs``: list of source ``File``s.                                                            |
| * ``data``: list of data ``File``s.                                                              |
+--------------------------------+-----------------------------------------------------------------+

